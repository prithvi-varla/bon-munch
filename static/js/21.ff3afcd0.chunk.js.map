{"version":3,"sources":["utils/form_validation_util.jsx","../node_modules/reactstrap/es/InputGroup.js","components/SubCategories/SubCategoryDetails/Components/index.js","components/SubCategories/SubCategoryDetails/index.js"],"names":["max","min","required","value","undefined","minValue18","email","test","aol","renderInputField","input","label","type","htmlFor","meta","touched","error","warning","className","placeholder","renderSelectField","optionValues","renderInputCurrencyField","renderCheckbox","id","propTypes","tag","tagPropType","size","PropTypes","string","cssModule","object","InputGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","SubCategoryForm","state","parentCategoryId","handleSubmitForm","bind","event","s","targetCategoryId","target","this","setState","initialValues","formData","dispatch","actionSubmit","history","push","handleSubmit","pristine","reset","submitting","Form","onSubmit","FormGroup","Field","name","component","validate","onChange","handleCategoryChange","Label","step","Button","color","disabled","onClick","cancelProduct","Component","reduxForm","form","SubCategoryDetails","uploadStatus","fetchAllCategories","setTimeout","categoryId","fetchCategory","actionName","saveCategory","categoryInfo","data","action","tempList","forEach","categoryMapName","sortList","filter","ele","ind","findIndex","elem","sort","a","b","keyIncrement","map","item","key","HeaderCrumb","title","LoadingImage","location","Object","assign","password","Card","CardBody","CardTitle","connect","store","Categories","fetchCategoryById","categoryType"],"mappings":"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","file":"static/js/21.ff3afcd0.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n    Label,\n    Input,\n    CustomInput\n  } from 'reactstrap';\n\n\nexport const required = value => value ? undefined : 'Required'\nexport const maxLength = max => value =>\n  value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength15 = maxLength(15)\nexport const number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined\nexport const minValue = min => value =>\n  value && value < min ? `Must be at least ${min}` : undefined\nexport const minValue18 = minValue(18)\nexport const email = value =>\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n  'Invalid email address' : undefined\nexport const tooOld = value =>\n  value && value > 65 ? 'You might be too old for this' : undefined\nexport const aol = value =>\n  value && /.+@aol\\.com/.test(value) ?\n  'Really? You still use AOL for your email?' : undefined\n\nexport const renderInputField = ({ input, label, type, htmlFor, meta: { touched, error, warning } }) => (\n    <div className=\"form-valid\">\n        <Label htmlFor={htmlFor}>{label}</Label>\n        <Input\n        {...input} placeholder={label} type={type}\n        />\n        {touched && ((error && <span> {error}</span>) || (warning && <span> {warning}</span>))}\n        \n    </div>\n)\n\nexport const renderSelectField = ({ input, label, type, htmlFor, optionValues, meta: { touched, error, warning } }) => (\n  <div className=\"form-valid\">\n      <Label htmlFor={htmlFor}>{label}</Label>\n      <Input\n      {...input} placeholder={label} type={type}\n      >{optionValues}</Input>\n      {touched && ((error && <span> {error}</span>) || (warning && <span> {warning}</span>))}\n      \n  </div>\n)\n\nexport const renderInputCurrencyField = ({ input, label, type, meta: { touched, error, warning } }) => (\n  <div className=\"form-valid\">\n      <Input\n      {...input} placeholder={label} type={type}\n      />\n      {touched && ((error && <span> {error}</span>) || (warning && <span> {warning}</span>))}\n      \n  </div>\n)\n\nexport const renderCheckbox = ({ input, label, type, className, id, meta: { touched, error, warning } }) => (\n  <div className=\"form-valid\">\n      <CustomInput\n      {...input} className={className} type={type} label={label} id={id}\n      />\n  </div>\n)\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  size: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar InputGroup = function InputGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      size = props.size,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"size\"]);\n\n  var classes = mapToCssModules(classNames(className, 'input-group', size ? \"input-group-\" + size : null), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nInputGroup.propTypes = propTypes;\nInputGroup.defaultProps = defaultProps;\nexport default InputGroup;","import React from 'react';\nimport { Field, reduxForm } from 'redux-form'\n\nimport {\n    Form,\n    Label,\n    FormGroup,\n    Input,\n    Button,\n    InputGroup,\n    InputGroupAddon\n  } from 'reactstrap';\n\nimport {renderInputField, renderCheckbox, renderSelectField, renderInputCurrencyField, required, email, aol, minValue18} from '../../../../utils/form_validation_util';\n\n\nclass SubCategoryForm extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            parentCategoryId: ''\n        };\n\n        this.handleSubmitForm.bind(this);\n      }\n\n    handleCategoryChange(event, s) {\n        let targetCategoryId = event.target.value;\n        this.setState({\n            parentCategoryId : targetCategoryId\n        });\n      }\n\n      componentDidUpdate() {\n        if (this.state.parentCategoryId == '') {\n          if (this.props.initialValues != null){\n            this.setState({\n                parentCategoryId : this.props.initialValues.parentCategoryId\n          });\n        }\n      }\n    }\n\n    handleSubmitForm (formData, dispatch) {\n\n        formData.parentCategoryId = this.state.parentCategoryId;\n        this.props.actionSubmit(formData);\n\n    }\n    \n    cancelProduct(event) {\n        this.props.history.push('/SubCategories');\n    }\n\nrender() {\n\n    let {\n        handleSubmit, pristine, reset, initialValues, submitting \n    } = this.props;\n      \n    if (initialValues != null) {\n        \n        return (\n            \n            <Form onSubmit={handleSubmit(this.handleSubmitForm.bind(this))}>\n\n                <FormGroup>\n                    <Field name=\"categoryName\" type=\"name\" id=\"categoryName\"\n                        htmlFor=\"categoryName\"\n                        component={renderInputField} label=\"Category Name\"\n                        validate={[ required ]}\n                    />\n                </FormGroup>\n                        \n                <FormGroup>\n                    <Field name=\"categoryDescription\" type=\"name\" id=\"categoryDescription\"\n                        htmlFor=\"categoryDescription\"\n                        component={renderInputField} label=\"Category Description\"\n                        validate={[ required ]}\n                    />\n                </FormGroup>\n\n                <FormGroup>\n                    <Field name=\"parentCategoryId\" type=\"select\" id=\"categorySelect\"\n                        htmlFor=\"categorySelect\" optionValues = {this.props.optionValues}\n                        onChange={event => this.handleCategoryChange(event, this)}\n                        component={renderSelectField} label=\"Select\"\n                        validate={[ required ]}\n                    />\n                </FormGroup>\n\n                <Label htmlFor=\"sortOrder\">Sort order</Label>\n                <InputGroup>\n                    <Field name=\"sortOrder\" type=\"number\" id=\"sortOrder\"\n                        min={0} max={100} step=\"1\"\n                        component={renderInputCurrencyField} label=\"Sort order\"\n                        validate={[ required ]}\n                    />\n                </InputGroup>\n\n                <br />\n\n                <FormGroup>\n                    <Field className=\"mb-3\" type=\"checkbox\" id=\"active\" name=\"active\"\n                        component={renderCheckbox} label=\"Active\"\n                    />\n                </FormGroup>\n\n                <FormGroup>\n                    <Field className=\"mb-3\" type=\"checkbox\" id=\"allowOnlineOrder\" name=\"allowOnlineOrder\"\n                        component={renderCheckbox} label=\"Allow Online Order\"\n                    />\n                </FormGroup>\n\n                <Button color=\"primary\" className=\"mt-1\"  type=\"submit\" disabled={submitting}>\n                    Save\n                </Button>\n                <Button size=\"sm\" color=\"link\" className=\"btn-link-primary\" onClick={this.cancelProduct.bind(this)}>\n                    Cancel\n                </Button>\n            </Form>\n\n        )\n    } else {\n        return null;\n    }\n\n    }\n}\n\nexport default reduxForm({\n  form: 'subCategoryForm' // a unique identifier for this form\n})(SubCategoryForm)","\n\nimport React, { Fragment, Component } from 'react';\n\nimport {\n  CardBody,\n  Card,\n  CardTitle\n} from 'reactstrap';\n\nimport { connect } from 'react-redux'\n\nimport HeaderCrumb from '../../../layout-components/HeaderCrumb';\n\nimport { fetchCategoryById } from '../../../actions/category_actions';\nimport { saveCategory } from '../../../actions/category_actions';\nimport { fetchAllCategories } from '../../../actions/category_actions';\n\nimport LoadingImage from '../../../layout-components/LoadingImage';\n\nimport SubCategoryForm from './Components/index';\n\nconst mapStateToProps = (store) => ({\n  initialValues: store.Categories.data,\n  categoryInfo: store.Categories\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveCategory: (data, actionName) => dispatch(saveCategory(data, actionName)),\n  fetchCategory: (categoryId) => dispatch(fetchCategoryById(categoryId)),\n  fetchAllCategories: (categoryType) => dispatch(fetchAllCategories(categoryType))\n});\n\n\nclass SubCategoryDetails extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n      optionValues: null,\n      uploadStatus: false\n  };\n\n    this.handleSubmitForm = this.handleSubmitForm.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchAllCategories(\"CATEGORY\");\n    setTimeout(() => {\n    if (this.state.categoryId != null) {\n      this.props.fetchCategory(this.state.categoryId);\n    }\n  }, 100)\n  }\n\n  handleSubmitForm (formData, dispatch) {\n    var actionName = this.state.categoryId != null ? 'UPDATE' : 'CREATE';\n    this.props.saveCategory(formData, actionName);\n\n    this.setState({\n      uploadStatus: true\n    });\n    setTimeout(() => {\n      this.props.history.push('/SubCategories', { state: 'success'});\n    }, 2000)\n\n  }\n\n  componentDidUpdate() {\n\n    if(this.state.optionValues == null && this.props.categoryInfo.data != null  && this.props.categoryInfo.action == 'FETCH_ALL' ) {\n\n      let optionValues = null;\n\n      let tempList = [];\n      this.props.categoryInfo.data.forEach(({ categoryId, categoryMapName }) => tempList.push({ categoryId, categoryMapName }));\n\n      let filterList = tempList.filter( (ele, ind) => ind === tempList.findIndex( elem => elem.categoryMapName === ele.categoryMapName));\n\n      // sort list\n      let sortList = filterList\n        .sort((a, b) => {\n          if (a < b) return -1;\n          else if (a > b) return 1;\n          return 0;\n        });\n\n        let keyIncrement = 1;\n        optionValues = sortList.map(item => {\n          return <option key= {keyIncrement++} value={item.categoryId}>{item.categoryMapName}</option>;\n        });\n\n        this.setState({\n          optionValues: optionValues\n        });\n    }\n    \n  }\n\n  render() {\n\n    let initialValues = null;\n\n    if (this.state.uploadStatus) {\n      return (\n        <div>\n          <HeaderCrumb title=\"Category\" />\n          <LoadingImage />\n        </div>\n      );\n    } else {\n      const { state } = this.props.location;\n\n      if (state != undefined) {\n        this.state.categoryId = state.categoryId;\n      }\n    }\n\n    if (this.props.categoryInfo != null && this.props.categoryInfo.action != null && this.props.categoryInfo.action == 'FETCH') {\n      initialValues = this.props.initialValues;\n    }  else {\n      if (this.state.categoryId != undefined) {\n        return null;\n      }\n      initialValues = Object.assign({}, { name: '', password: '' });\n    }\n\n    return (\n      <Fragment>\n        <HeaderCrumb title=\"New Category\" />\n        <Card className=\"card-box mb-5\">\n              <CardBody>\n                \n                  <CardTitle className=\"font-weight-bold font-size-lg mb-4\">\n                    New Category\n                  </CardTitle>\n                  <SubCategoryForm {...this.props} optionValues={this.state.optionValues} actionSubmit={this.handleSubmitForm} initialValues = {initialValues}/>\n                </CardBody >\n              </Card>\n      </Fragment>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubCategoryDetails);\n"],"sourceRoot":""}