{"version":3,"sources":["utils/form_validation_util.jsx","../node_modules/reactstrap/es/InputGroup.js","components/Categories/CategoryDetails/Components/index.js","components/Categories/CategoryDetails/index.js"],"names":["max","min","required","value","undefined","minValue18","email","test","aol","renderInputField","input","label","type","htmlFor","meta","touched","error","warning","className","placeholder","renderSelectField","optionValues","renderInputCurrencyField","renderCheckbox","id","propTypes","tag","tagPropType","size","PropTypes","string","cssModule","object","InputGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","CategoryForm","handleSubmitForm","bind","formData","dispatch","this","actionSubmit","event","history","push","handleSubmit","initialValues","pristine","reset","submitting","Form","onSubmit","FormGroup","Field","name","component","validate","Label","step","Button","color","disabled","onClick","cancelProduct","Component","reduxForm","form","CategoryDetails","state","categoryName","sortOrder","categoryDescription","categoryId","uploadStatus","fetchCategory","actionName","saveCategory","setState","setTimeout","HeaderCrumb","title","LoadingImage","location","categoryInfo","action","Object","assign","password","Card","CardBody","CardTitle","connect","store","Categories","data","fetchCategoryById"],"mappings":"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","file":"static/js/18.5d3cb3e8.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n    Label,\n    Input,\n    CustomInput\n  } from 'reactstrap';\n\n\nexport const required = value => value ? undefined : 'Required'\nexport const maxLength = max => value =>\n  value && value.length > max ? `Must be ${max} characters or less` : undefined\nexport const maxLength15 = maxLength(15)\nexport const number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined\nexport const minValue = min => value =>\n  value && value < min ? `Must be at least ${min}` : undefined\nexport const minValue18 = minValue(18)\nexport const email = value =>\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n  'Invalid email address' : undefined\nexport const tooOld = value =>\n  value && value > 65 ? 'You might be too old for this' : undefined\nexport const aol = value =>\n  value && /.+@aol\\.com/.test(value) ?\n  'Really? You still use AOL for your email?' : undefined\n\nexport const renderInputField = ({ input, label, type, htmlFor, meta: { touched, error, warning } }) => (\n    <div className=\"form-valid\">\n        <Label htmlFor={htmlFor}>{label}</Label>\n        <Input\n        {...input} placeholder={label} type={type}\n        />\n        {touched && ((error && <span> {error}</span>) || (warning && <span> {warning}</span>))}\n        \n    </div>\n)\n\nexport const renderSelectField = ({ input, label, type, htmlFor, optionValues, meta: { touched, error, warning } }) => (\n  <div className=\"form-valid\">\n      <Label htmlFor={htmlFor}>{label}</Label>\n      <Input\n      {...input} placeholder={label} type={type}\n      >{optionValues}</Input>\n      {touched && ((error && <span> {error}</span>) || (warning && <span> {warning}</span>))}\n      \n  </div>\n)\n\nexport const renderInputCurrencyField = ({ input, label, type, meta: { touched, error, warning } }) => (\n  <div className=\"form-valid\">\n      <Input\n      {...input} placeholder={label} type={type}\n      />\n      {touched && ((error && <span> {error}</span>) || (warning && <span> {warning}</span>))}\n      \n  </div>\n)\n\nexport const renderCheckbox = ({ input, label, type, className, id, meta: { touched, error, warning } }) => (\n  <div className=\"form-valid\">\n      <CustomInput\n      {...input} className={className} type={type} label={label} id={id}\n      />\n  </div>\n)\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  size: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar InputGroup = function InputGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      size = props.size,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"size\"]);\n\n  var classes = mapToCssModules(classNames(className, 'input-group', size ? \"input-group-\" + size : null), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nInputGroup.propTypes = propTypes;\nInputGroup.defaultProps = defaultProps;\nexport default InputGroup;","import React from 'react';\nimport { Field, reduxForm } from 'redux-form'\n\nimport {\n    Form,\n    Label,\n    FormGroup,\n    Button,\n    InputGroup\n  } from 'reactstrap';\n\nimport {renderInputField, renderCheckbox, renderSelectField, renderInputCurrencyField, required, email, aol, minValue18} from '../../../../utils/form_validation_util';\n\n\nclass CategoryForm extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.handleSubmitForm.bind(this);\n    }\n\n    handleSubmitForm (formData, dispatch) {\n        this.props.actionSubmit(formData);\n    }\n\n    cancelProduct(event) {\n        this.props.history.push('/Categories');\n    }\n\n    render() {\n\n        let {\n            handleSubmit, pristine, reset, initialValues, submitting \n        } = this.props;\n        \n        if (initialValues != null) {\n            \n            return (\n                \n                <Form onSubmit={handleSubmit(this.handleSubmitForm.bind(this))}>\n\n                    <FormGroup>\n                        <Field name=\"categoryName\" type=\"name\" id=\"categoryName\"\n                            htmlFor=\"categoryName\"\n                            component={renderInputField} label=\"Category Name\"\n                            validate={[ required ]}\n                        />\n                    </FormGroup>\n                            \n                    <FormGroup>\n                        <Field name=\"categoryDescription\" type=\"name\" id=\"categoryDescription\"\n                            htmlFor=\"categoryDescription\"\n                            component={renderInputField} label=\"Category Description\"\n                            validate={[ required ]}\n                        />\n                    </FormGroup>\n\n                    <Label htmlFor=\"sortOrder\">Sort order</Label>\n                    <InputGroup>\n                        <Field name=\"sortOrder\" type=\"number\" id=\"sortOrder\"\n                            min={0} max={100} step=\"1\"\n                            component={renderInputCurrencyField} label=\"Sort order\"\n                            validate={[ required ]}\n                        />\n                    </InputGroup>\n\n                    <br />\n\n                    <FormGroup>\n                        <Field className=\"mb-3\" type=\"checkbox\" id=\"active\" name=\"active\"\n                            component={renderCheckbox} label=\"Active\"\n                        />\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Field className=\"mb-3\" type=\"checkbox\" id=\"allowOnlineOrder\" name=\"allowOnlineOrder\"\n                            component={renderCheckbox} label=\"Allow Online Order\"\n                        />\n                    </FormGroup>\n\n                    <Button color=\"primary\" className=\"mt-1\"  type=\"submit\" disabled={submitting}>\n                        Save\n                    </Button>\n                    <Button size=\"sm\" color=\"link\" className=\"btn-link-primary\" onClick={this.cancelProduct.bind(this)}>\n                        Cancel\n                    </Button>\n                </Form>\n\n            )\n        } else {\n            return null;\n        }\n\n    }\n}\n\nexport default reduxForm({\n  form: 'categoryForm' // a unique identifier for this form\n})(CategoryForm)","\n\n\n\n\nimport React, { Fragment, Component } from 'react';\n\nimport {\n  CardBody,\n  Card,\n  CardTitle\n} from 'reactstrap';\n\nimport { connect } from 'react-redux'\n\nimport HeaderCrumb from '../../../layout-components/HeaderCrumb';\n\nimport { fetchCategoryById } from '../../../actions/category_actions';\nimport { saveCategory } from '../../../actions/category_actions';\nimport { fetchAllCategories } from '../../../actions/category_actions';\n\nimport LoadingImage from '../../../layout-components/LoadingImage';\n\nimport SubCategoryForm from './Components/index';\n\nconst mapStateToProps = (store) => ({\n  initialValues: store.Categories.data,\n  categoryInfo: store.Categories\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveCategory: (data, actionName) => dispatch(saveCategory(data, actionName)),\n  fetchCategory: (categoryId) => dispatch(fetchCategoryById(categoryId))\n});\n\n\nclass CategoryDetails extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n        categoryName: '',\n        sortOrder: 0,\n        categoryDescription: '',\n        categoryId: null,\n\n        uploadStatus: false\n  };\n\n    this.handleSubmitForm = this.handleSubmitForm.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.categoryId != null) {\n      this.props.fetchCategory(this.state.categoryId);\n    }\n  }\n\n  handleSubmitForm (formData, dispatch) {\n    var actionName = this.state.categoryId != null ? 'UPDATE' : 'CREATE';\n    this.props.saveCategory(formData, actionName);\n\n    this.setState({\n      uploadStatus: true\n    });\n    setTimeout(() => {\n      this.props.history.push('/Categories', { state: 'success'});\n    }, 2000)\n\n  }\n\n  render() {\n\n    let initialValues = null;\n\n    if (this.state.uploadStatus) {\n      return (\n        <div>\n          <HeaderCrumb title=\"Category Details\" />\n          <LoadingImage />\n        </div>\n      );\n    } else {\n      const { state } = this.props.location;\n\n      if (state != undefined) {\n        this.state.categoryId = state.categoryId;\n      }\n    }\n\n    if (this.props.categoryInfo != null && this.props.categoryInfo.action != null && this.props.categoryInfo.action == 'FETCH') {\n      initialValues = this.props.initialValues;\n    }  else {\n      if (this.state.categoryId != undefined) {\n        return null;\n      }\n      initialValues = Object.assign({}, { name: '', password: '' });\n    }\n\n    return (\n      <Fragment>\n        <HeaderCrumb title=\"New Category\" />\n        <Card className=\"card-box mb-5\">\n              <CardBody>\n                  <CardTitle className=\"font-weight-bold font-size-lg mb-4\">\n                    New Category\n                  </CardTitle>\n                  <SubCategoryForm {...this.props} optionValues={this.state.optionValues} actionSubmit={this.handleSubmitForm} initialValues = {initialValues}/>\n                </CardBody >\n              </Card>\n      </Fragment>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryDetails);\n"],"sourceRoot":""}